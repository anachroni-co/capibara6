version: '3.8'

services:
  # API Principal
  capibara6-api:
    build: .
    container_name: capibara6-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://capibara6:capibara6_password@postgres:5432/capibara6
      - REDIS_URL=redis://redis:6379/0
      - TIMESCALEDB_URL=postgresql://capibara6:capibara6_password@timescaledb:5432/capibara6_metrics
      - E2B_API_KEY=${E2B_API_KEY}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
    volumes:
      - ./backend/data:/app/backend/data
      - ./backend/logs:/app/backend/logs
      - ./backend/models:/app/backend/models
    depends_on:
      - postgres
      - redis
      - timescaledb
    restart: unless-stopped
    networks:
      - capibara6-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # API GraphQL
  capibara6-graphql:
    build: .
    container_name: capibara6-graphql
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://capibara6:capibara6_password@postgres:5432/capibara6
      - REDIS_URL=redis://redis:6379/0
      - GRAPHQL_ENDPOINT=/graphql
    command: ["python", "-m", "uvicorn", "backend.graphql.main:app", "--host", "0.0.0.0", "--port", "8001"]
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - capibara6-network

  # Worker de Background
  capibara6-worker:
    build: .
    container_name: capibara6-worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://capibara6:capibara6_password@postgres:5432/capibara6
      - REDIS_URL=redis://redis:6379/0
      - WORKER_TYPE=background
    command: ["python", "-m", "rq", "worker", "default", "--url", "redis://redis:6379/0"]
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - capibara6-network
    deploy:
      replicas: 3

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: capibara6-postgres
    environment:
      - POSTGRES_DB=capibara6
      - POSTGRES_USER=capibara6
      - POSTGRES_PASSWORD=capibara6_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/deployment/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - capibara6-network

  # TimescaleDB para métricas
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: capibara6-timescaledb
    environment:
      - POSTGRES_DB=capibara6_metrics
      - POSTGRES_USER=capibara6
      - POSTGRES_PASSWORD=capibara6_password
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./backend/deployment/init-timescaledb.sql:/docker-entrypoint-initdb.d/init-timescaledb.sql
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - capibara6-network

  # Redis para caché y colas
  redis:
    image: redis:7-alpine
    container_name: capibara6-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - capibara6-network

  # Nginx como Load Balancer
  nginx:
    image: nginx:alpine
    container_name: capibara6-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/deployment/ssl:/etc/nginx/ssl
    depends_on:
      - capibara6-api
      - capibara6-graphql
    restart: unless-stopped
    networks:
      - capibara6-network

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: capibara6-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - capibara6-network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: capibara6-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=capibara6_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./backend/deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - capibara6-network

  # Jaeger para tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: capibara6-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - capibara6-network

volumes:
  postgres_data:
  timescaledb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  capibara6-network:
    driver: bridge
